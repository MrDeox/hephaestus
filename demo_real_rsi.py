#!/usr/bin/env python3
"""
Demo Real RSI System - Demonstra√ß√£o do Sistema RSI Real
Demonstra a gera√ß√£o de c√≥digo real a partir de hip√≥teses e sua execu√ß√£o.
"""

import asyncio
import json
from datetime import datetime
from pathlib import Path

from src.execution.real_code_generator import RealCodeGenerator, HypothesisSpec
from src.execution.canary_deployment import CanaryDeploymentOrchestrator, DeploymentConfig
from src.execution.rsi_execution_pipeline import RSIExecutionPipeline

def create_example_hypothesis():
    """Cria uma hip√≥tese de exemplo para otimiza√ß√£o."""
    return {
        'id': 'demo-hypothesis-001',
        'name': 'Feature Engineering Optimization',
        'description': 'Implementar feature scaling otimizado para melhorar accuracy',
        'type': 'optimization',
        'priority': 'high',
        'improvement_targets': {
            'accuracy': 0.05,  # 5% improvement
            'latency': -0.10   # 10% latency reduction
        },
        'constraints': {
            'max_complexity': 0.8,
            'safety_level': 'high',
            'timeout_seconds': 300
        },
        'context': {
            'domain': 'feature_engineering',
            'baseline_accuracy': 0.85,
            'current_model': 'sklearn_classifier'
        }
    }

async def demonstrate_real_code_generation():
    """Demonstra a gera√ß√£o de c√≥digo real."""
    print("üöÄ Demo: Sistema RSI Real - Gera√ß√£o de C√≥digo")
    print("=" * 60)
    
    # 1. Criar gerador de c√≥digo
    print("üìù 1. Inicializando gerador de c√≥digo real...")
    code_generator = RealCodeGenerator()
    
    # 2. Criar hip√≥tese de exemplo
    print("üí° 2. Criando hip√≥tese de exemplo...")
    hypothesis = create_example_hypothesis()
    print(f"   Hip√≥tese: {hypothesis['name']}")
    print(f"   Objetivo: {hypothesis['improvement_targets']}")
    
    # 3. Gerar c√≥digo real
    print("‚öôÔ∏è  3. Gerando c√≥digo real a partir da hip√≥tese...")
    try:
        artifact = await code_generator.process_hypothesis(hypothesis)
        
        if artifact:
            print("‚úÖ C√≥digo gerado com sucesso!")
            print(f"   Hash: {artifact.hash_sha256[:16]}...")
            code_lines = len(artifact.source_code.split('\n'))
            test_lines = len(artifact.test_code.split('\n'))
            print(f"   Linhas de c√≥digo: {code_lines}")
            print(f"   Linhas de teste: {test_lines}")
            print(f"   Requisitos: {len(artifact.requirements)}")
            
            # Mostrar um trecho do c√≥digo gerado
            print("\nüìã C√≥digo gerado (primeiras 15 linhas):")
            print("-" * 40)
            code_lines = artifact.source_code.split('\n')[:15]
            for i, line in enumerate(code_lines, 1):
                print(f"{i:2d}: {line}")
            print("-" * 40)
            
            # Mostrar resultados do benchmark
            if artifact.benchmark_results:
                print("\nüìä Resultados do benchmark:")
                benchmark = artifact.benchmark_results
                print(f"   Status: {benchmark.get('status', 'unknown')}")
                print(f"   Accuracy: {benchmark.get('accuracy', 0):.4f}")
                print(f"   Lat√™ncia: {benchmark.get('latency_seconds', 0)*1000:.2f}ms")
                print(f"   Mem√≥ria: {benchmark.get('memory_mb', 0):.1f}MB")
            
            return artifact
        else:
            print("‚ùå Falha na gera√ß√£o de c√≥digo")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o: {e}")
        return None

async def demonstrate_canary_deployment(artifact):
    """Demonstra o deployment can√°rio."""
    if not artifact:
        print("‚ö†Ô∏è  Pulando deployment - sem artefato")
        return
    
    print("\nüê§ 4. Demonstrando deployment can√°rio...")
    
    # Criar diret√≥rio tempor√°rio
    demo_dir = Path("demo_deployment")
    demo_dir.mkdir(exist_ok=True)
    
    # Salvar artefato
    with open(demo_dir / "generated_module.py", 'w') as f:
        f.write(artifact.source_code)
    
    with open(demo_dir / "metadata.json", 'w') as f:
        json.dump({
            'spec': artifact.spec.__dict__,
            'hash': artifact.hash_sha256,
            'benchmark_results': artifact.benchmark_results
        }, f, indent=2)
    
    print("‚úÖ Artefato salvo para deployment")
    print(f"   Diret√≥rio: {demo_dir.absolute()}")
    print(f"   Arquivos: generated_module.py, metadata.json")
    
    # Demonstrar orquestrador de deployment
    config = DeploymentConfig(
        canary_percentage=20,  # Come√ßar com 20%
        rollout_steps=[20, 50, 100],
        evaluation_duration_seconds=30,
        success_threshold=0.95
    )
    
    orchestrator = CanaryDeploymentOrchestrator(config=config)
    print("‚úÖ Orquestrador de deployment inicializado")
    print(f"   Estrat√©gia can√°rio: {config.rollout_steps}%")
    print(f"   Threshold de sucesso: {config.success_threshold}")

async def demonstrate_complete_pipeline():
    """Demonstra o pipeline completo."""
    print("\nüîÑ 5. Demonstrando pipeline RSI completo...")
    
    # Criar pipeline
    pipeline = RSIExecutionPipeline()
    
    # Executar hip√≥tese
    hypothesis = create_example_hypothesis()
    
    print("üöÄ Executando pipeline completo...")
    print("   Fases: C√≥digo ‚Üí Teste ‚Üí Deploy ‚Üí Monitor ‚Üí Approve/Rollback")
    
    try:
        result = await pipeline.execute_hypothesis(hypothesis)
        
        print(f"\nüìã Resultado do pipeline:")
        print(f"   Pipeline ID: {result.pipeline_id}")
        print(f"   Status: {result.status.value}")
        print(f"   Sucesso: {'‚úÖ' if result.success else '‚ùå'}")
        print(f"   Dura√ß√£o: {result.duration_seconds:.2f}s")
        
        if result.error_messages:
            print(f"   Erros: {', '.join(result.error_messages)}")
        
        if result.performance_improvement:
            print(f"   Melhoria de performance:")
            for metric, improvement in result.performance_improvement.items():
                print(f"     {metric}: {improvement:+.2%}")
        
        # Mostrar m√©tricas de execu√ß√£o
        if result.execution_metrics:
            print(f"\nüìä M√©tricas de execu√ß√£o:")
            for phase, metrics in result.execution_metrics.items():
                print(f"   {phase}:")
                for key, value in metrics.items():
                    if isinstance(value, dict):
                        continue
                    print(f"     {key}: {value}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erro no pipeline: {e}")
        return None

async def demonstrate_rsi_capabilities():
    """Demonstra as capacidades RSI reais vs simuladas."""
    print("\nüîç 6. Comparando RSI Real vs Simulado...")
    print("=" * 60)
    
    print("üìä Sistema Atual (Simulado):")
    try:
        with open("rsi_continuous_state.json", 'r') as f:
            simulated_state = json.load(f)
        
        metrics = simulated_state.get('metrics', {})
        print(f"   Total de ciclos: {metrics.get('total_cycles', 0):,}")
        print(f"   Skills 'aprendidas': {metrics.get('total_skills_learned', 0):,}")
        print(f"   Expans√µes bem-sucedidas: {metrics.get('successful_expansions', 0)}")
        print(f"   ‚ö†Ô∏è  TODAS as skills s√£o strings aleat√≥rias, n√£o c√≥digo execut√°vel")
        
    except Exception as e:
        print(f"   Erro lendo estado simulado: {e}")
    
    print("\nüöÄ Sistema RSI Real (Nossa Implementa√ß√£o):")
    print("   ‚úÖ Gera c√≥digo Python execut√°vel real")
    print("   ‚úÖ Executa testes herm√©ticos autom√°ticos")  
    print("   ‚úÖ Faz benchmark de performance real")
    print("   ‚úÖ Deploy can√°rio com rollback autom√°tico")
    print("   ‚úÖ Monitoramento de m√©tricas reais")
    print("   ‚úÖ Valida√ß√£o de seguran√ßa multi-camada")
    print("   ‚úÖ Isolamento com virtualenv + processo")
    
    print("\nüí° Diferen√ßa Fundamental:")
    print("   Sistema Anterior: Simula melhorias (fake)")
    print("   Sistema Atual: Gera e executa c√≥digo real (funcional)")

async def main():
    """Fun√ß√£o principal da demonstra√ß√£o."""
    print("üéØ DEMONSTRA√á√ÉO: Sistema RSI Real")
    print("Sistema completo de Recursive Self-Improvement com gera√ß√£o de c√≥digo real")
    print("=" * 80)
    
    try:
        # 1. Demonstrar gera√ß√£o de c√≥digo
        artifact = await demonstrate_real_code_generation()
        
        # 2. Demonstrar deployment can√°rio
        await demonstrate_canary_deployment(artifact)
        
        # 3. Demonstrar pipeline completo
        result = await demonstrate_complete_pipeline()
        
        # 4. Demonstrar capacidades RSI
        await demonstrate_rsi_capabilities()
        
        print("\n" + "=" * 80)
        print("‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA")
        print("üéâ Sistema RSI Real funcionando: Hip√≥tese ‚Üí C√≥digo ‚Üí Deploy ‚Üí Monitor")
        print("üí™ Agora temos RSI verdadeiro, n√£o mais simula√ß√£o!")
        
        # Salvar resultados da demo
        demo_results = {
            'timestamp': datetime.now().isoformat(),
            'demo_completed': True,
            'code_generated': artifact is not None,
            'pipeline_executed': result is not None,
            'pipeline_success': result.success if result else False,
            'artifact_hash': artifact.hash_sha256 if artifact else None,
            'performance_improvement': result.performance_improvement if result else None
        }
        
        with open("demo_results.json", 'w') as f:
            json.dump(demo_results, f, indent=2)
        
        print(f"üìã Resultados salvos em: demo_results.json")
        
    except Exception as e:
        print(f"\n‚ùå Erro na demonstra√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())