"""
Continuous RSI AI Runner - Sistema de Execu√ß√£o Cont√≠nua
Deixa o sistema RSI AI rodando indefinidamente com auto-expans√£o ativa.
"""

import asyncio
import logging
import signal
import sys
import time
from datetime import datetime, timezone, timedelta
from typing import Dict, Any
import json
from pathlib import Path

from src.main import RSIOrchestrator
from src.memory import RSIMemoryHierarchy, RSIMemoryConfig
from autonomous_expansion_strategy import AutonomousExpansionEngine

# Configurar logging para monitoramento cont√≠nuo
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    handlers=[
        logging.FileHandler('continuous_rsi.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


class ContinuousRSIRunner:
    """
    Sistema de Execu√ß√£o Cont√≠nua para RSI AI.
    
    Funcionalidades:
    - Execu√ß√£o 24/7 com auto-recupera√ß√£o
    - Monitoramento cont√≠nuo de performance
    - Auto-expans√£o peri√≥dica
    - Logging detalhado de todas as opera√ß√µes
    - Salvamento autom√°tico de estado
    """
    
    def __init__(self):
        self.orchestrator = None
        self.memory_system = None
        self.expansion_engine = None
        self.running = False
        self.start_time = None
        self.cycle_count = 0
        self.last_expansion = None
        self.performance_history = []
        self.state_file = Path("rsi_continuous_state.json")
        
        # Configura√ß√µes de execu√ß√£o
        self.expansion_interval = 300  # 5 minutos entre expans√µes
        self.health_check_interval = 60  # 1 minuto entre health checks
        self.state_save_interval = 120  # 2 minutos entre salvamentos
        
        # M√©tricas de performance
        self.metrics = {
            'total_cycles': 0,
            'successful_expansions': 0,
            'failed_expansions': 0,
            'total_knowledge_acquired': 0,
            'total_skills_learned': 0,
            'total_experiences': 0,
            'uptime_seconds': 0,
            'memory_usage_peak': 0
        }
        
        # Configurar handlers para shutdown gracioso
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """Handler para shutdown gracioso."""
        logger.info(f"üõë Recebido sinal {signum}, iniciando shutdown gracioso...")
        self.running = False
    
    async def initialize_systems(self):
        """Inicializa todos os sistemas RSI."""
        logger.info("üöÄ Inicializando sistemas RSI...")
        
        try:
            # Inicializar orquestrador
            self.orchestrator = RSIOrchestrator(environment='production')
            await self.orchestrator.start()
            
            # Inicializar sistema de mem√≥ria
            memory_config = RSIMemoryConfig(
                working_memory_capacity=50000,
                max_memory_usage_gb=32,
                monitoring_enabled=True
            )
            self.memory_system = RSIMemoryHierarchy(memory_config)
            
            # Conectar mem√≥ria ao orquestrador
            self.orchestrator.memory_system = self.memory_system
            
            # Inicializar motor de expans√£o
            self.expansion_engine = AutonomousExpansionEngine(
                self.orchestrator, 
                self.memory_system
            )
            
            # Carregar estado anterior se existir
            await self._load_state()
            
            logger.info("‚úÖ Todos os sistemas RSI inicializados com sucesso!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro inicializando sistemas: {e}")
            return False
    
    async def _load_state(self):
        """Carrega estado anterior do sistema."""
        try:
            if self.state_file.exists():
                with open(self.state_file, 'r') as f:
                    state = json.load(f)
                    self.metrics = state.get('metrics', self.metrics)
                    self.cycle_count = state.get('cycle_count', 0)
                    logger.info(f"üì• Estado anterior carregado: {self.cycle_count} ciclos")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel carregar estado anterior: {e}")
    
    async def _save_state(self):
        """Salva estado atual do sistema."""
        try:
            state = {
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'metrics': self.metrics,
                'cycle_count': self.cycle_count,
                'uptime_seconds': (datetime.now(timezone.utc) - self.start_time).total_seconds() if self.start_time else 0
            }
            
            with open(self.state_file, 'w') as f:
                json.dump(state, f, indent=2)
                
        except Exception as e:
            logger.error(f"‚ùå Erro salvando estado: {e}")
    
    async def health_check(self) -> Dict[str, Any]:
        """Verifica sa√∫de do sistema."""
        try:
            health_status = {
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'orchestrator_healthy': self.orchestrator is not None,
                'memory_system_healthy': self.memory_system is not None,
                'expansion_engine_healthy': self.expansion_engine is not None,
                'cycle_count': self.cycle_count,
                'uptime_hours': (datetime.now(timezone.utc) - self.start_time).total_seconds() / 3600 if self.start_time else 0
            }
            
            # Verificar mem√≥ria
            if self.memory_system:
                memory_status = await self.memory_system.get_memory_status()
                health_status['memory_systems'] = {
                    name: stats['size'] for name, stats in memory_status['memory_systems'].items()
                }
            
            # Verificar m√©tricas
            health_status['metrics'] = self.metrics.copy()
            
            return health_status
            
        except Exception as e:
            logger.error(f"‚ùå Erro no health check: {e}")
            return {'healthy': False, 'error': str(e)}
    
    async def autonomous_learning_cycle(self):
        """Executa um ciclo de aprendizado aut√¥nomo."""
        try:
            logger.info(f"üîÑ Iniciando ciclo de aprendizado #{self.cycle_count + 1}")
            
            # Simular atividade de aprendizado
            learning_tasks = [
                self._simulate_knowledge_acquisition(),
                self._simulate_skill_development(),
                self._simulate_experience_recording(),
                self._simulate_pattern_recognition()
            ]
            
            # Executar tarefas em paralelo
            results = await asyncio.gather(*learning_tasks, return_exceptions=True)
            
            # Processar resultados
            successful_tasks = sum(1 for r in results if not isinstance(r, Exception))
            
            self.cycle_count += 1
            self.metrics['total_cycles'] += 1
            
            logger.info(f"‚úÖ Ciclo #{self.cycle_count} completado: {successful_tasks}/{len(learning_tasks)} tarefas bem-sucedidas")
            
            return {
                'cycle_number': self.cycle_count,
                'successful_tasks': successful_tasks,
                'total_tasks': len(learning_tasks),
                'timestamp': datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro no ciclo de aprendizado: {e}")
            return {'success': False, 'error': str(e)}
    
    async def _simulate_knowledge_acquisition(self):
        """Simula aquisi√ß√£o de conhecimento."""
        try:
            knowledge_topics = [
                'quantum_computing', 'blockchain_technology', 'artificial_intelligence',
                'machine_learning', 'data_science', 'cybersecurity', 'cloud_computing',
                'neural_networks', 'deep_learning', 'reinforcement_learning'
            ]
            
            import random
            topic = random.choice(knowledge_topics)
            
            concept_data = {
                'concept': topic,
                'description': f'Advanced knowledge in {topic}',
                'type': 'acquired_knowledge',
                'confidence': random.uniform(0.7, 0.95),
                'source': 'autonomous_learning',
                'timestamp': datetime.now(timezone.utc).isoformat()
            }
            
            success = await self.memory_system.store_information(concept_data, memory_type='semantic')
            if success:
                self.metrics['total_knowledge_acquired'] += 1
                logger.info(f"üìö Conhecimento adquirido: {topic}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Erro na aquisi√ß√£o de conhecimento: {e}")
            return False
    
    async def _simulate_skill_development(self):
        """Simula desenvolvimento de habilidades."""
        try:
            skill_types = [
                'data_analysis', 'problem_solving', 'pattern_recognition',
                'optimization', 'prediction', 'classification', 'clustering',
                'feature_engineering', 'model_training', 'hyperparameter_tuning'
            ]
            
            import random
            skill = random.choice(skill_types)
            
            skill_data = {
                'skill': skill,
                'name': f'Advanced {skill}',
                'description': f'Autonomous development of {skill} capabilities',
                'skill_type': 'algorithm',
                'complexity': random.uniform(0.5, 0.9),
                'success_rate': random.uniform(0.8, 0.95),
                'source': 'autonomous_development'
            }
            
            success = await self.memory_system.store_information(skill_data, memory_type='procedural')
            if success:
                self.metrics['total_skills_learned'] += 1
                logger.info(f"‚ö° Habilidade desenvolvida: {skill}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Erro no desenvolvimento de habilidades: {e}")
            return False
    
    async def _simulate_experience_recording(self):
        """Simula registro de experi√™ncias."""
        try:
            experience_types = [
                'learning_session', 'problem_solving', 'optimization_task',
                'data_processing', 'model_evaluation', 'system_improvement',
                'knowledge_synthesis', 'pattern_discovery', 'insight_generation'
            ]
            
            import random
            experience = random.choice(experience_types)
            
            experience_data = {
                'event': experience,
                'description': f'Autonomous {experience} completed successfully',
                'context': {
                    'duration': random.randint(60, 300),
                    'complexity': random.uniform(0.3, 0.8),
                    'success_rate': random.uniform(0.85, 0.98)
                },
                'importance': random.uniform(0.6, 0.9),
                'emotions': {'satisfaction': random.uniform(0.7, 0.9)},
                'tags': ['autonomous', 'learning', experience],
                'source': 'continuous_operation'
            }
            
            success = await self.memory_system.store_information(experience_data, memory_type='episodic')
            if success:
                self.metrics['total_experiences'] += 1
                logger.info(f"üìù Experi√™ncia registrada: {experience}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Erro no registro de experi√™ncias: {e}")
            return False
    
    async def _simulate_pattern_recognition(self):
        """Simula reconhecimento de padr√µes."""
        try:
            # Analisar padr√µes nas experi√™ncias passadas
            recent_experiences = await self.memory_system.retrieve_information(
                {'recent': True, 'limit': 10},
                memory_types=['episodic']
            )
            
            if recent_experiences['episodic']:
                pattern_data = {
                    'pattern': 'learning_efficiency_trend',
                    'description': 'Identified pattern in learning efficiency over time',
                    'type': 'behavioral_pattern',
                    'confidence': 0.85,
                    'source': 'pattern_recognition',
                    'data_points': len(recent_experiences['episodic'])
                }
                
                success = await self.memory_system.store_information(pattern_data, memory_type='semantic')
                if success:
                    logger.info("üîç Padr√£o identificado: learning_efficiency_trend")
                
                return success
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro no reconhecimento de padr√µes: {e}")
            return False
    
    async def autonomous_expansion_cycle(self):
        """Executa ciclo de expans√£o aut√¥noma."""
        try:
            logger.info("üöÄ Iniciando ciclo de expans√£o aut√¥noma...")
            
            # Executar expans√£o
            expansion_result = await self.expansion_engine.autonomous_expansion_cycle()
            
            # Atualizar m√©tricas
            if expansion_result.get('success', True) and expansion_result.get('success_rate', 0) > 0.5:
                self.metrics['successful_expansions'] += 1
                logger.info(f"‚úÖ Expans√£o bem-sucedida: {expansion_result.get('implemented_expansions', 0)} melhorias")
            else:
                self.metrics['failed_expansions'] += 1
                if 'error' in expansion_result:
                    logger.error(f"‚ùå Expans√£o falhou: {expansion_result['error']}")
                else:
                    logger.warning("‚ö†Ô∏è Expans√£o com resultados limitados")
            
            self.last_expansion = datetime.now(timezone.utc)
            
            return expansion_result
            
        except Exception as e:
            logger.error(f"‚ùå Erro na expans√£o aut√¥noma: {e}")
            return {
                'success': False, 
                'error': str(e),
                'success_rate': 0.0,
                'implemented_expansions': 0,
                'proposed_expansions': 0
            }
    
    async def continuous_operation(self):
        """Opera√ß√£o cont√≠nua principal."""
        logger.info("üîÑ Iniciando opera√ß√£o cont√≠nua do RSI AI...")
        
        self.running = True
        self.start_time = datetime.now(timezone.utc)
        
        # Contadores para intervalos
        last_expansion = datetime.now(timezone.utc)
        last_health_check = datetime.now(timezone.utc)
        last_state_save = datetime.now(timezone.utc)
        
        try:
            while self.running:
                current_time = datetime.now(timezone.utc)
                
                # Executar ciclo de aprendizado (sempre)
                await self.autonomous_learning_cycle()
                
                # Health check peri√≥dico
                if (current_time - last_health_check).total_seconds() >= self.health_check_interval:
                    health_status = await self.health_check()
                    if health_status.get('healthy', True):
                        logger.info(f"üíö Sistema saud√°vel - Ciclo #{self.cycle_count}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Problemas detectados: {health_status}")
                    last_health_check = current_time
                
                # Expans√£o aut√¥noma peri√≥dica
                if (current_time - last_expansion).total_seconds() >= self.expansion_interval:
                    await self.autonomous_expansion_cycle()
                    last_expansion = current_time
                
                # Salvamento de estado peri√≥dico
                if (current_time - last_state_save).total_seconds() >= self.state_save_interval:
                    await self._save_state()
                    last_state_save = current_time
                
                # Atualizar m√©tricas
                self.metrics['uptime_seconds'] = (current_time - self.start_time).total_seconds()
                
                # Pequena pausa para evitar sobrecarga
                await asyncio.sleep(10)
                
        except KeyboardInterrupt:
            logger.info("üõë Interrup√ß√£o recebida, parando opera√ß√£o...")
        except Exception as e:
            logger.error(f"‚ùå Erro na opera√ß√£o cont√≠nua: {e}")
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """Shutdown gracioso do sistema."""
        logger.info("üõë Iniciando shutdown gracioso...")
        
        try:
            # Salvar estado final
            await self._save_state()
            
            # Shutdown dos sistemas
            if self.memory_system:
                await self.memory_system.shutdown()
                logger.info("‚úÖ Sistema de mem√≥ria desligado")
            
            if self.orchestrator:
                await self.orchestrator.stop()
                logger.info("‚úÖ Orquestrador desligado")
            
            # Relat√≥rio final
            uptime = (datetime.now(timezone.utc) - self.start_time).total_seconds() if self.start_time else 0
            logger.info(f"üìä Relat√≥rio Final:")
            logger.info(f"   - Tempo de execu√ß√£o: {uptime/3600:.1f} horas")
            logger.info(f"   - Ciclos completados: {self.cycle_count}")
            logger.info(f"   - Conhecimento adquirido: {self.metrics['total_knowledge_acquired']}")
            logger.info(f"   - Habilidades desenvolvidas: {self.metrics['total_skills_learned']}")
            logger.info(f"   - Experi√™ncias registradas: {self.metrics['total_experiences']}")
            logger.info(f"   - Expans√µes bem-sucedidas: {self.metrics['successful_expansions']}")
            
            logger.info("‚úÖ Shutdown conclu√≠do com sucesso!")
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante shutdown: {e}")
    
    async def run(self):
        """Ponto de entrada principal."""
        logger.info("üß† Iniciando Sistema RSI AI Cont√≠nuo")
        logger.info("=" * 60)
        
        # Inicializar sistemas
        if not await self.initialize_systems():
            logger.error("‚ùå Falha na inicializa√ß√£o, abortando...")
            return
        
        # Iniciar opera√ß√£o cont√≠nua
        await self.continuous_operation()


async def main():
    """Fun√ß√£o principal."""
    print("üöÄ RSI AI - Sistema de Execu√ß√£o Cont√≠nua")
    print("=" * 60)
    print("üîÑ O sistema ir√° rodar continuamente at√© ser interrompido")
    print("üìä Logs sendo salvos em 'continuous_rsi.log'")
    print("üíæ Estado sendo salvo em 'rsi_continuous_state.json'")
    print("üõë Use Ctrl+C para parar graciosamente")
    print("=" * 60)
    
    runner = ContinuousRSIRunner()
    await runner.run()


if __name__ == "__main__":
    asyncio.run(main())