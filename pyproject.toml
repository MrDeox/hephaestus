[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hephaestus-rsi"
version = "1.0.0"
description = "Production-ready Recursive Self-Improvement (RSI) AI system with comprehensive safety measures"
readme = "README.md"
authors = [
    {name = "Hephaestus RSI Team", email = "team@hephaestus-rsi.ai"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "artificial-intelligence", "machine-learning", "rsi", "self-improvement",
    "safety", "monitoring", "meta-learning", "circuit-breaker"
]
dependencies = [
    # Core dependencies
    "pydantic>=2.0.0",
    "pyrsistent>=0.19.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    
    # Learning & ML
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "river>=0.18.0",
    "mlflow>=2.5.0",
    
    # Monitoring & Safety
    "loguru>=0.7.0",
    "pybreaker>=1.0.0",
    "psutil>=5.9.0",
    
    # Security
    "restrictedpython>=6.0",
    "cryptography>=41.0.0",
    
    # Optional dependencies with fallbacks
    "torch>=2.0.0; extra=='torch'",
    "pytorch-lightning>=2.0.0; extra=='lightning'",
    "stable-baselines3>=2.0.0; extra=='rl'",
    "optuna>=3.0.0; extra=='optimization'",
    "redis>=4.0.0; extra=='redis'",
    "docker>=6.0.0; extra=='docker'",
    
    # Development and testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "coverage[toml]>=7.0.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
]

[project.optional-dependencies]
torch = ["torch>=2.0.0", "torchvision>=0.15.0"]
lightning = ["pytorch-lightning>=2.0.0"]
rl = ["stable-baselines3>=2.0.0", "gymnasium>=0.28.0"]
optimization = ["optuna>=3.0.0", "ray[tune]>=2.5.0"]
redis = ["redis>=4.0.0"]
docker = ["docker>=6.0.0"]
monitoring = [
    "opentelemetry-api>=1.15.0",
    "opentelemetry-sdk>=1.15.0",
    "opentelemetry-exporter-otlp>=1.15.0",
    "pyod>=1.1.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "coverage[toml]>=7.0.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
all = [
    "hephaestus-rsi[torch,lightning,rl,optimization,redis,docker,monitoring]"
]

[project.urls]
Homepage = "https://github.com/hephaestus-rsi/hephaestus"
Documentation = "https://hephaestus-rsi.readthedocs.io/"
Repository = "https://github.com/hephaestus-rsi/hephaestus.git"
"Bug Tracker" = "https://github.com/hephaestus-rsi/hephaestus/issues"

[project.scripts]
hephaestus = "src.main:main"
hephaestus-test = "tests.run_tests:main"
hephaestus-monitor = "scripts.monitor:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "tests*"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--asyncio-mode=auto",
    "-ra",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "security: Security tests",
    "slow: Slow running tests",
    "redis: Tests requiring Redis",
    "docker: Tests requiring Docker",
    "gpu: Tests requiring GPU",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.black]
line-length = 100
target-version = ["py311"]
include = "\\.pyi?$"
extend-exclude = """
/(
    \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | _build
  | buck-out
  | build
  | dist
)/
"""

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # use 'raise ... from err'
    "B905",  # use explicit 'strict=' parameter with 'zip()'
    "ARG002", # unused method argument
    "ARG001", # unused function argument
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["ARG", "FBT"]
"scripts/**/*.py" = ["ARG"]
"**/__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = [
    "river.*",
    "pyod.*",
    "mlflow.*",
    "pybreaker.*",
    "restrictedpython.*",
    "torch.*",
    "lightning.*",
    "stable_baselines3.*",
    "optuna.*",
    "ray.*",
    "psutil.*",
    "docker.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]  # Skip assert and shell usage in tests

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true